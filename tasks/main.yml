---

- name: Remove existing container
  docker_container:
    name: portainer
    state: absent
    purge_networks: yes
    force_kill: yes

- name: Remove persistent data
  file:
    state: absent
    path: /opt/portainer

- name: Deploy Portainer to host
  docker_container:
    name: portainer
    image: "portainer/portainer:{{ version }}"
    state: started
    detach: true
    recreate: yes
    restart_policy: always
    published_ports:
      - "{{ host_port }}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/portainer:/data

- name: Wait for container
  wait_for:
    port: "{{ host_port }}"
    host: "{{ inventory_hostname }}"

- name: Configure admin user password
  uri:
    url: "{{ portainer_endpoint }}/users/admin/init"
    method: POST
    return_content: yes
    body_format: json
    body: { "Username":"{{ admin_user }}", "Password":"{{ admin_password }}"}
  when: admin_user and admin_password is defined

- name: Generate authentication token
  uri:
    url: "{{ portainer_endpoint }}/auth"
    method: POST
    return_content: yes
    body_format: json
    body: {"Username": "{{ admin_user }}", "Password": "{{ admin_password }}"}
  register: auth_token
  when: admin_user and admin_password is defined

- name: Define remote endpoint
  uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: POST
    return_content: yes
    headers:
      Authorization: "{{ (auth_token.content|from_json).jwt }}"
    body_format: json
    body: {"Name":"{{ r_endpoint_name }}", "URL":"{{ r_endpoint_url }}"}
  when: r_endpoint_url is defined

# - name: show templating results
#   debug: msg="{{ lookup('template','ldap.json.j2') }}"

# - name: Configure LDAP
#   uri:
#     url: "{{ portainer_endpoint }}/settings"
#     method: PUT
#     return_content: yes
#     headers:
#       Authorization: "{{ (auth_token.content|from_json).jwt }}"
#       accept: "application/json"
#     body_format: json
#     body: "{{ lookup('template','ldap.json.j2') }}"
#   when: ldap_account is defined
